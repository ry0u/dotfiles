[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'osyo-manga/unite-filetype'

[[plugins]]
repo = 'ujihisa/unite-colorscheme'

[[plugins]]
repo = 'Shougo/vimshell.vim'
hook_add = '''
	nnoremap <Space>v  :35vs<CR>:<C-u>VimShellBufferDir<CR>
'''

[[plugins]]
repo = 'Shougo/vimfiler'
hook_add = '''
	let file_name = expand("%:p")
	if has('vim_starting') &&  file_name == ""
		autocmd VimEnter * VimFilerCurrentDir
	endif

	let g:vimfiler_as_default_explorer=1
	let g:vimfiler_safe_mode_by_default=0
	nnoremap <Leader>f :VimFiler<Enter>
	nnoremap <Leader>fs :VimFiler -split<Enter>
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
	let g:quickrun_config = {
	\   "_" : {
	\       "outputter/buffer/split" : ":botright 3sp",
	\       "outputter/buffer/close_on_empty" : 1,
	\		"hook/time/enable" : 1
	\   },
	\   "tex2" : {
	\		'runner': 'vimproc',
	\		'runner/vimproc/updatetime' : 60,
	\		'command' : 'ptex2pdf',
	\		'exec': ['%c -l "%S:t:r.tex"','evince "%S:t:r.pdf"']
	\   },
	\	"tex" : {
	\		'runner': 'vimproc',
	\		'runner/vimproc/updatetime' : 60,
	\		'command'  : 'platex',
	\		'exec' : ['%c %s','dvipdfmx %s:r.dvi','evince %s:r.pdf']
	\	},
	\   "html" : {
	\		'command': 'firefox',
	\   	'exec': '%c %s',
	\		'outputter': 'browser'
	\   },
	\   "dot" : {
	\   	'command': 'dot',
	\   	'exec': ['%c -Tpng %s -o %s:r.png', 'display %s:r.png']
	\   }
	\}
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
hook_add = '''
	let g:neocomplete#enable_at_startup=1
	let g:neocomplete#auto_completion_start_length=2
	let g:neocomplete#enable_underbar_completion=1
'''

[[plugins]]
repo = 'Shougo/neosnippet'
hook_add = '''
	let g:neosnippet#enable_snipmate_compatibility=1
	let g:neosnippet#snippets_directory='~/.vim/dein/snippets'
	imap <C-k>     <Plug>(neosnippet_expand_or_jump)
	smap <C-k>     <Plug>(neosnippet_expand_or_jump)
	xmap <C-k>     <Plug>(neosnippet_expand_target)
	" SuperTab like snippets behavior.
	imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
	\ "\<Plug>(neosnippet_expand_or_jump)"
	\: pumvisible() ? "\<C-n>" : "\<TAB>"
	smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
	\ "\<Plug>(neosnippet_expand_or_jump)"
	\: "\<TAB>"
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'scrooloose/syntastic'
hook_add = '''
	let g:syntastic_check_on_open=0
	let g:syntastic_check_on_wq=0
	let g:syntastic_c_check_header = 1
	let g:syntastic_cpp_check_header = 1
	let g:syntastic_tex_checkers=['chktex']
	let g:syntastic_java_javac_config_file_enabled = 1
'''

[[plugins]]
repo = "tyru/caw.vim.git"
hook_add = '''
	nmap <Leader>c <Plug>(caw:hatpos:toggle)
	vmap <Leader>c <Plug>(caw:hatpos:toggle)
'''

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] 
repo = 'jonathanfilip/vim-lucius'

# language
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# Cpp
[[plugins]]
repo = 'vim-jp/cpp-vim'
on_ft = 'cpp'

[[plugins]]
repo = 'octol/vim-cpp-enhanced-highlight'
hook_add = '''
	let g:cpp_class_scope_highlight = 1
	let g:cpp_experimental_template_highlight = 1
'''

# Markdown
[[plugins]]
repo =  "godlygeek/tabular"

[[plugins]]
repo =  "joker1007/vim-markdown-quote-syntax"

[[plugins]]
repo =  'rcmdnk/vim-markdown'
hook_add = '''
	let g:vim_markdown_liquid=1
	let g:vim_markdown_frontmatter=1
	let g:vim_markdown_math=1
	let g:vim_markdown_folding_disabled=1
	au BufRead,BufNewFile *.md set filetype=markdown
'''

[[plugins]]
repo =  'tukiyo/previm'
hook_add = '''
	cmap po PrevimOpen
'''

[[plugins]]
repo =  'tyru/open-browser.vim'
hook_add = '''
	" open-browser
	" カーソル下のURLをブラウザで開く
	nmap <Leader>o <Plug>(openbrowser-open)
	vmap <Leader>o <Plug>(openbrowser-open)
	" ググる
	nnoremap <Leader>gg :<C-u>OpenBrowserSearch<Space><C-r><C-w><Enter>
'''

